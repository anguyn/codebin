// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?   // Cloudflare R2 URL
  bio           String?   @db.Text
  username      String?   @unique  // Username cho public profile URL
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  snippets  Snippet[]
  sessions  Session[]
  accounts  Account[]
  favorites Favorite[]

  @@index([username])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Snippet {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  code        String   @db.Text
  language    String   // e.g., "javascript", "python", "typescript"
  complexity  String?  // O(n), O(nÂ²), O(log n), etc.
  isPublic    Boolean  @default(true)
  viewCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  slug        String   @unique

  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags      SnippetOnTag[]
  favorites Favorite[]

  @@index([userId])
  @@index([language])
  @@index([slug])
  @@index([isPublic])
  @@index([createdAt])
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  type      TagType  @default(TOPIC)
  createdAt DateTime @default(now())

  snippets SnippetOnTag[]

  @@index([slug])
  @@index([type])
}

model SnippetOnTag {
  snippet   Snippet @relation(fields: [snippetId], references: [id], onDelete: Cascade)
  snippetId String
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId     String

  @@id([snippetId, tagId])
  @@index([snippetId])
  @@index([tagId])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  snippetId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  snippet Snippet @relation(fields: [snippetId], references: [id], onDelete: Cascade)

  @@unique([userId, snippetId])
  @@index([userId])
  @@index([snippetId])
}

enum TagType {
  LANGUAGE
  TOPIC
}
